<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vehicle Asset Management System - Connected</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }

        .connection-status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 500;
            margin-top: 10px;
        }

        .status-connected {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-loading {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .status-error {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 5px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        .nav-tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 150px;
            font-weight: 500;
        }

        .nav-tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .nav-tab:hover {
            transform: translateY(-1px);
            background: rgba(102, 126, 234, 0.1);
        }

        .nav-tab.active:hover {
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.15);
        }

        .metric-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .metric-icon {
            width: 60px;
            height: 60px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 1.5rem;
            color: white;
        }

        .metric-icon.primary { background: linear-gradient(135deg, #667eea, #764ba2); }
        .metric-icon.success { background: linear-gradient(135deg, #11998e, #38ef7d); }
        .metric-icon.warning { background: linear-gradient(135deg, #f093fb, #f5576c); }
        .metric-icon.info { background: linear-gradient(135deg, #4facfe, #00f2fe); }

        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }

        .metric-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .data-table {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .table-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }

        .table-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-box {
            padding: 12px 20px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            width: 300px;
        }

        .search-box:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #11998e, #38ef7d);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, #f093fb, #f5576c);
            color: white;
        }

        .btn-sm {
            padding: 8px 15px;
            font-size: 0.9rem;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 15px;
            border: 1px solid #e1e5e9;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e1e5e9;
        }

        th {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            font-weight: 600;
            color: #495057;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }

        tr:hover {
            background-color: #f8f9fa;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-active { background: #d4edda; color: #155724; }
        .status-maintenance { background: #fff3cd; color: #856404; }
        .status-retired { background: #f8d7da; color: #721c24; }
        .status-overdue { background: #f8d7da; color: #721c24; }
        .status-due { background: #fff3cd; color: #856404; }
        .status-scheduled { background: #d1ecf1; color: #0c5460; }

        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert {
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 25px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .alert-success {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-warning {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .alert-danger {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-info {
            background: linear-gradient(135deg, #d1ecf1, #bee5eb);
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .nav-tabs {
                flex-direction: column;
            }
            
            .nav-tab {
                margin-bottom: 5px;
            }
            
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .table-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .table-controls {
                justify-content: center;
            }
            
            .search-box {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1><i class="fas fa-car"></i> Vehicle Asset Management System</h1>
            <p>Professional fleet management connected to your Google Sheets</p>
            <div id="connectionStatus" class="connection-status status-loading">
                <i class="fas fa-spinner fa-spin"></i> Connecting to Google Sheets...
            </div>
        </div>

        <!-- Navigation -->
        <div class="nav-tabs">
            <div class="nav-tab active" onclick="showTab('dashboard')">
                <i class="fas fa-tachometer-alt"></i> Dashboard
            </div>
            <div class="nav-tab" onclick="showTab('vehicles')">
                <i class="fas fa-car"></i> Vehicles
            </div>
            <div class="nav-tab" onclick="showTab('maintenance')">
                <i class="fas fa-tools"></i> Maintenance
            </div>
            <div class="nav-tab" onclick="showTab('drivers')">
                <i class="fas fa-user"></i> Drivers
            </div>
            <div class="nav-tab" onclick="showTab('logs')">
                <i class="fas fa-list"></i> Vehicle Logs
            </div>
            <div class="nav-tab" onclick="showTab('settings')">
                <i class="fas fa-cog"></i> Settings
            </div>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="dashboard-grid">
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon primary">
                            <i class="fas fa-car"></i>
                        </div>
                        <div>
                            <div class="metric-value" id="totalVehicles">-</div>
                            <div class="metric-label">Total Vehicles</div>
                        </div>
                    </div>
                </div>

                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon success">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div>
                            <div class="metric-value" id="activeVehicles">-</div>
                            <div class="metric-label">Active Vehicles</div>
                        </div>
                    </div>
                </div>

                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon warning">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <div>
                            <div class="metric-value" id="maintenanceDue">-</div>
                            <div class="metric-label">Maintenance Due</div>
                        </div>
                    </div>
                </div>

                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon info">
                            <i class="fas fa-pound-sign"></i>
                        </div>
                        <div>
                            <div class="metric-value" id="fleetValue">-</div>
                            <div class="metric-label">Fleet Value</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Live Connection Status -->
            <div id="dashboardAlerts"></div>

            <!-- Recent Activity -->
            <div class="data-table">
                <div class="table-header">
                    <h3 class="table-title"><i class="fas fa-activity"></i> Live Data from Google Sheets</h3>
                    <button class="btn btn-primary" onclick="refreshData()">
                        <i class="fas fa-sync-alt"></i> Refresh Data
                    </button>
                </div>
                <div id="dashboardContent">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>Loading data from your Google Sheet...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Vehicles Tab -->
        <div id="vehicles" class="tab-content">
            <div class="data-table">
                <div class="table-header">
                    <h3 class="table-title"><i class="fas fa-car"></i> Vehicle Fleet</h3>
                    <div class="table-controls">
                        <input type="text" class="search-box" placeholder="Search vehicles..." id="vehicleSearch" onkeyup="filterTable('vehiclesTable', this.value)">
                        <button class="btn btn-primary" onclick="refreshData()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
                <div class="table-container">
                    <table>
                        <thead id="vehiclesHeader">
                            <tr>
                                <th>Loading...</th>
                            </tr>
                        </thead>
                        <tbody id="vehiclesTable">
                            <tr>
                                <td>
                                    <div class="loading">
                                        <div class="spinner"></div>
                                        Loading vehicle data...
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Maintenance Tab -->
        <div id="maintenance" class="tab-content">
            <div class="data-table">
                <div class="table-header">
                    <h3 class="table-title"><i class="fas fa-tools"></i> Maintenance Schedule</h3>
                    <div class="table-controls">
                        <input type="text" class="search-box" placeholder="Search maintenance..." id="maintenanceSearch" onkeyup="filterTable('maintenanceTable', this.value)">
                        <button class="btn btn-primary" onclick="refreshData()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
                <div class="table-container">
                    <table>
                        <thead id="maintenanceHeader">
                            <tr>
                                <th>Loading...</th>
                            </tr>
                        </thead>
                        <tbody id="maintenanceTable">
                            <tr>
                                <td>
                                    <div class="loading">
                                        <div class="spinner"></div>
                                        Loading maintenance data...
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Drivers Tab -->
        <div id="drivers" class="tab-content">
            <div class="data-table">
                <div class="table-header">
                    <h3 class="table-title"><i class="fas fa-user"></i> Driver Management</h3>
                    <div class="table-controls">
                        <input type="text" class="search-box" placeholder="Search drivers..." id="driverSearch" onkeyup="filterTable('driversTable', this.value)">
                        <button class="btn btn-primary" onclick="refreshData()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
                <div class="table-container">
                    <table>
                        <thead id="driversHeader">
                            <tr>
                                <th>Loading...</th>
                            </tr>
                        </thead>
                        <tbody id="driversTable">
                            <tr>
                                <td>
                                    <div class="loading">
                                        <div class="spinner"></div>
                                        Loading driver data...
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Vehicle Logs Tab -->
        <div id="logs" class="tab-content">
            <div class="data-table">
                <div class="table-header">
                    <h3 class="table-title"><i class="fas fa-list"></i> Vehicle Logs</h3>
                    <div class="table-controls">
                        <input type="text" class="search-box" placeholder="Search logs..." id="logsSearch" onkeyup="filterTable('logsTable', this.value)">
                        <button class="btn btn-primary" onclick="refreshData()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
                <div class="table-container">
                    <table>
                        <thead id="logsHeader">
                            <tr>
                                <th>Loading...</th>
                            </tr>
                        </thead>
                        <tbody id="logsTable">
                            <tr>
                                <td>
                                    <div class="loading">
                                        <div class="spinner"></div>
                                        Loading log data...
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Settings Tab -->
        <div id="settings" class="tab-content">
            <div class="data-table">
                <h3><i class="fas fa-cog"></i> Connection Settings</h3>
                
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <strong>Connected to your Google Sheet!</strong><br>
                        Your Vehicle Management System is now pulling live data from your spreadsheet.
                    </div>
                </div>

                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px;">
                    <div>
                        <label style="display: block; margin-bottom: 8px; font-weight: 500;">Google Sheets ID:</label>
                        <input type="text" id="currentSpreadsheetId" readonly style="width: 100%; padding: 10px; border: 2px solid #e1e5e9; border-radius: 8px; background: #f8f9fa;" value="1K3rt0zJwAL7QR3ywZom44lPMCKqC6xWm10GhVeKV7Eo">
                    </div>
                    <div>
                        <label style="display: block; margin-bottom: 8px; font-weight: 500;">API Key:</label>
                        <input type="password" id="currentApiKey" readonly style="width: 100%; padding: 10px; border: 2px solid #e1e5e9; border-radius: 8px; background: #f8f9fa;" value="AIzaSyCDuhRExaVbW6uHsLB_mLr3Tr1G0c4jO2E">
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <h4>Available Sheets in your Spreadsheet:</h4>
                    <div id="availableSheets" style="margin-top: 15px;">
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>Loading sheet information...</p>
                        </div>
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <h4>Data Refresh Settings:</h4>
                    <div style="display: flex; gap: 15px; margin-top: 15px; flex-wrap: wrap;">
                        <button class="btn btn-primary" onclick="refreshData()">
                            <i class="fas fa-sync-alt"></i> Manual Refresh
                        </button>
                        <button class="btn btn-success" onclick="testConnection()">
                            <i class="fas fa-plug"></i> Test Connection
                        </button>
                        <button class="btn btn-warning" onclick="viewRawData()">
                            <i class="fas fa-code"></i> View Raw Data
                        </button>
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <h4>Quick Actions:</h4>
                    <div style="display: flex; gap: 15px; margin-top: 15px; flex-wrap: wrap;">
                        <a href="https://docs.google.com/spreadsheets/d/1K3rt0zJwAL7QR3ywZom44lPMCKqC6xWm10GhVeKV7Eo/edit" target="_blank" class="btn btn-primary">
                            <i class="fas fa-external-link-alt"></i> Open Google Sheet
                        </a>
                        <button class="btn btn-success" onclick="exportData()">
                            <i class="fas fa-download"></i> Export Data
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration with your actual credentials
        const CONFIG = {
            SPREADSHEET_ID: '1K3rt0zJwAL7QR3ywZom44lPMCKqC6xWm10GhVeKV7Eo',
            API_KEY: 'AIzaSyCDuhRExaVbW6uHsLB_mLr3Tr1G0c4jO2E',
            BASE_URL: 'https://sheets.googleapis.com/v4/spreadsheets'
        };

        // Application state
        let appData = {
            vehicles: [],
            maintenance: [],
            drivers: [],
            logs: [],
            dashboard: {},
            lastUpdate: null,
            connectionStatus: 'connecting'
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚗 Vehicle Management System - Initializing...');
            initializeApp();
        });

        async function initializeApp() {
            updateConnectionStatus('connecting', 'Connecting to Google Sheets...');
            
            try {
                // Test connection first
                await testConnection();
                
                // Load all data
                await loadAllData();
                
                // Update UI
                updateDashboard();
                updateAllTables();
                
                updateConnectionStatus('connected', 'Connected to Google Sheets');
                
                // Auto-refresh every 5 minutes
                setInterval(refreshData, 5 * 60 * 1000);
                
            } catch (error) {
                console.error('Initialization error:', error);
                updateConnectionStatus('error', 'Connection failed: ' + error.message);
                showErrorAlert(error.message);
            }
        }

        async function testConnection() {
            const testUrl = `${CONFIG.BASE_URL}/${CONFIG.SPREADSHEET_ID}?key=${CONFIG.API_KEY}`;
            
            try {
                const response = await fetch(testUrl);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error?.message || `HTTP ${response.status}`);
                }
                
                const data = await response.json();
                console.log('✅ Connection test successful:', data.properties.title);
                
                // Update available sheets
                updateAvailableSheets(data.sheets);
                
                return data;
            } catch (error) {
                console.error('❌ Connection test failed:', error);
                throw error;
            }
        }

        async function loadAllData() {
            console.log('📊 Loading all data from Google Sheets...');
            
            try {
                // Define the sheets to load
                const sheetsToLoad = [
                    { name: 'Vehicles', key: 'vehicles' },
                    { name: 'Maintenance_Schedule', key: 'maintenance' },
                    { name: 'Drivers', key: 'drivers' },
                    { name: 'Vehicles_Log', key: 'logs' },
                    { name: 'Dashboard', key: 'dashboard' }
                ];

                // Load all sheets in parallel
                const promises = sheetsToLoad.map(sheet => loadSheetData(sheet.name, sheet.key));
                await Promise.all(promises);
                
                appData.lastUpdate = new Date();
                console.log('✅ All data loaded successfully');
                
            } catch (error) {
                console.error('❌ Error loading data:', error);
                throw error;
            }
        }

        async function loadSheetData(sheetName, dataKey) {
            const url = `${CONFIG.BASE_URL}/${CONFIG.SPREADSHEET_ID}/values/${sheetName}?key=${CONFIG.API_KEY}`;
            
            try {
                const response = await fetch(url);
                
                if (!response.ok) {
                    if (response.status === 400) {
                        console.warn(`⚠️ Sheet "${sheetName}" not found, skipping...`);
                        return;
                    }
                    const errorData = await response.json();
                    throw new Error(`${sheetName}: ${errorData.error?.message || response.statusText}`);
                }
                
                const data = await response.json();
                
                if (data.values && data.values.length > 0) {
                    // Convert to array of objects
                    const headers = data.values[0];
                    const rows = data.values.slice(1);
                    
                    const processedData = rows.map(row => {
                        const obj = {};
                        headers.forEach((header, index) => {
                            obj[header] = row[index] || '';
                        });
                        return obj;
                    });
                    
                    appData[dataKey] = processedData;
                    console.log(`✅ Loaded ${processedData.length} rows from ${sheetName}`);
                } else {
                    console.log(`⚠️ No data found in ${sheetName}`);
                    appData[dataKey] = [];
                }
                
            } catch (error) {
                console.error(`❌ Error loading ${sheetName}:`, error);
                appData[dataKey] = [];
            }
        }

        function updateConnectionStatus(status, message) {
            const statusElement = document.getElementById('connectionStatus');
            const iconClass = status === 'connected' ? 'fa-check-circle' : 
                            status === 'error' ? 'fa-exclamation-triangle' : 'fa-spinner fa-spin';
            const statusClass = status === 'connected' ? 'status-connected' : 
                              status === 'error' ? 'status-error' : 'status-loading';
            
            statusElement.className = `connection-status ${statusClass}`;
            statusElement.innerHTML = `<i class="fas ${iconClass}"></i> ${message}`;
            
            appData.connectionStatus = status;
        }

        function updateDashboard() {
            const vehicles = appData.vehicles || [];
            const maintenance = appData.maintenance || [];
            
            // Calculate metrics
            const totalVehicles = vehicles.length;
            const activeVehicles = vehicles.filter(v => 
                v.Current_Status === 'Active' || v.Status === 'Active'
            ).length;
            
            // Calculate maintenance due (looking for overdue or due soon)
            const today = new Date();
            const maintenanceDue = maintenance.filter(m => {
                if (!m.Next_Due_Date) return false;
                const dueDate = new Date(m.Next_Due_Date);
                const daysUntilDue = (dueDate - today) / (1000 * 60 * 60 * 24);
                return daysUntilDue <= 7; // Due within 7 days or overdue
            }).length;
            
            // Calculate fleet value
            const fleetValue = vehicles.reduce((sum, v) => {
                const value = parseFloat(v.Current_Value || v.Purchase_Price || 0);
                return sum + value;
            }, 0);
            
            // Update metrics
            document.getElementById('totalVehicles').textContent = totalVehicles;
            document.getElementById('activeVehicles').textContent = activeVehicles;
            document.getElementById('maintenanceDue').textContent = maintenanceDue;
            document.getElementById('fleetValue').textContent = fleetValue > 0 ? 
                `£${(fleetValue / 1000).toFixed(0)}K` : '-';
            
            // Update dashboard content
            updateDashboardContent();
        }

        function updateDashboardContent() {
            const dashboardContent = document.getElementById('dashboardContent');
            const vehicles = appData.vehicles || [];
            const maintenance = appData.maintenance || [];
            
            if (vehicles.length === 0 && maintenance.length === 0) {
                dashboardContent.innerHTML = `
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <div>
                            <strong>No data found yet</strong><br>
                            Make sure your Google Sheet has data in the correct sheets: Vehicles, Maintenance_Schedule, Drivers, etc.
                        </div>
                    </div>
                `;
                return;
            }
            
            let html = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <strong>Live data loaded successfully!</strong><br>
                        Last updated: ${appData.lastUpdate ? appData.lastUpdate.toLocaleString() : 'Never'}<br>
                        Found: ${vehicles.length} vehicles, ${maintenance.length} maintenance records
                    </div>
                </div>
            `;
            
            if (vehicles.length > 0) {
                html += `
                    <h4 style="margin-top: 30px; margin-bottom: 15px;">📊 Recent Vehicle Data</h4>
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    ${Object.keys(vehicles[0]).slice(0, 6).map(key => `<th>${key}</th>`).join('')}
                                </tr>
                            </thead>
                            <tbody>
                                ${vehicles.slice(0, 5).map(vehicle => `
                                    <tr>
                                        ${Object.values(vehicle).slice(0, 6).map(value => `<td>${value || '-'}</td>`).join('')}
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                `;
            }
            
            dashboardContent.innerHTML = html;
        }

        function updateAllTables() {
            updateVehiclesTable();
            updateMaintenanceTable();
            updateDriversTable();
            updateLogsTable();
        }

        function updateVehiclesTable() {
            const vehicles = appData.vehicles || [];
            const headerElement = document.getElementById('vehiclesHeader');
            const tableElement = document.getElementById('vehiclesTable');
            
            if (vehicles.length === 0) {
                headerElement.innerHTML = '<tr><th>No Data</th></tr>';
                tableElement.innerHTML = '<tr><td>No vehicle data found in your Google Sheet</td></tr>';
                return;
            }
            
            // Create headers
            const headers = Object.keys(vehicles[0]);
            headerElement.innerHTML = `<tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>`;
            
            // Create rows
            tableElement.innerHTML = vehicles.map(vehicle => `
                <tr>
                    ${headers.map(header => {
                        let value = vehicle[header] || '-';
                        
                        // Add status badges for status columns
                        if (header.toLowerCase().includes('status') && value !== '-') {
                            const statusClass = value.toLowerCase().replace(/\s+/g, '-');
                            value = `<span class="status-badge status-${statusClass}">${value}</span>`;
                        }
                        
                        return `<td>${value}</td>`;
                    }).join('')}
                </tr>
            `).join('');
        }

        function updateMaintenanceTable() {
            const maintenance = appData.maintenance || [];
            const headerElement = document.getElementById('maintenanceHeader');
            const tableElement = document.getElementById('maintenanceTable');
            
            if (maintenance.length === 0) {
                headerElement.innerHTML = '<tr><th>No Data</th></tr>';
                tableElement.innerHTML = '<tr><td>No maintenance data found in your Google Sheet</td></tr>';
                return;
            }
            
            // Create headers
            const headers = Object.keys(maintenance[0]);
            headerElement.innerHTML = `<tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>`;
            
            // Create rows
            tableElement.innerHTML = maintenance.map(item => `
                <tr>
                    ${headers.map(header => {
                        let value = item[header] || '-';
                        
                        // Add status badges for status columns
                        if (header.toLowerCase().includes('status') && value !== '-') {
                            const statusClass = value.toLowerCase().replace(/\s+/g, '-');
                            value = `<span class="status-badge status-${statusClass}">${value}</span>`;
                        }
                        
                        return `<td>${value}</td>`;
                    }).join('')}
                </tr>
            `).join('');
        }

        function updateDriversTable() {
            const drivers = appData.drivers || [];
            const headerElement = document.getElementById('driversHeader');
            const tableElement = document.getElementById('driversTable');
            
            if (drivers.length === 0) {
                headerElement.innerHTML = '<tr><th>No Data</th></tr>';
                tableElement.innerHTML = '<tr><td>No driver data found in your Google Sheet</td></tr>';
                return;
            }
            
            // Create headers
            const headers = Object.keys(drivers[0]);
            headerElement.innerHTML = `<tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>`;
            
            // Create rows
            tableElement.innerHTML = drivers.map(driver => `
                <tr>
                    ${headers.map(header => {
                        let value = driver[header] || '-';
                        
                        // Add status badges for status columns
                        if (header.toLowerCase().includes('status') && value !== '-') {
                            const statusClass = value.toLowerCase().replace(/\s+/g, '-');
                            value = `<span class="status-badge status-${statusClass}">${value}</span>`;
                        }
                        
                        return `<td>${value}</td>`;
                    }).join('')}
                </tr>
            `).join('');
        }

        function updateLogsTable() {
            const logs = appData.logs || [];
            const headerElement = document.getElementById('logsHeader');
            const tableElement = document.getElementById('logsTable');
            
            if (logs.length === 0) {
                headerElement.innerHTML = '<tr><th>No Data</th></tr>';
                tableElement.innerHTML = '<tr><td>No log data found in your Google Sheet</td></tr>';
                return;
            }
            
            // Create headers
            const headers = Object.keys(logs[0]);
            headerElement.innerHTML = `<tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>`;
            
            // Create rows
            tableElement.innerHTML = logs.map(log => `
                <tr>
                    ${headers.map(header => {
                        let value = log[header] || '-';
                        return `<td>${value}</td>`;
                    }).join('')}
                </tr>
            `).join('');
        }

        function updateAvailableSheets(sheets) {
            const availableSheetsElement = document.getElementById('availableSheets');
            
            if (!sheets || sheets.length === 0) {
                availableSheetsElement.innerHTML = '<p>No sheets found</p>';
                return;
            }
            
            const sheetsList = sheets.map(sheet => `
                <div style="display: inline-block; margin: 5px; padding: 8px 15px; background: #e9ecef; border-radius: 20px; font-size: 0.9rem;">
                    <i class="fas fa-table"></i> ${sheet.properties.title}
                </div>
            `).join('');
            
            availableSheetsElement.innerHTML = `
                <p>Found ${sheets.length} sheets in your spreadsheet:</p>
                <div style="margin-top: 10px;">${sheetsList}</div>
            `;
        }

        // Navigation functions
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all nav tabs
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked nav tab
            event.target.closest('.nav-tab').classList.add('active');
        }

        // Utility functions
        async function refreshData() {
            updateConnectionStatus('connecting', 'Refreshing data...');
            
            try {
                await loadAllData();
                updateDashboard();
                updateAllTables();
                updateConnectionStatus('connected', 'Data refreshed successfully');
                showNotification('Data refreshed successfully!', 'success');
            } catch (error) {
                updateConnectionStatus('error', 'Refresh failed: ' + error.message);
                showNotification('Refresh failed: ' + error.message, 'error');
            }
        }

        function filterTable(tableId, searchTerm) {
            const table = document.getElementById(tableId);
            const rows = table.querySelectorAll('tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                const isVisible = text.includes(searchTerm.toLowerCase());
                row.style.display = isVisible ? '' : 'none';
            });
        }

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'error' ? 'danger' : type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                max-width: 400px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                animation: slideIn 0.3s ease;
            `;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                <div>${message}</div>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, 5000);
            
            // Add CSS for animations
            if (!document.getElementById('notificationStyles')) {
                const style = document.createElement('style');
                style.id = 'notificationStyles';
                style.textContent = `
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                    @keyframes slideOut {
                        from { transform: translateX(0); opacity: 1; }
                        to { transform: translateX(100%); opacity: 0; }
                    }
                `;
                document.head.appendChild(style);
            }
        }

        function showErrorAlert(message) {
            const dashboardAlerts = document.getElementById('dashboardAlerts');
            dashboardAlerts.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <strong>Connection Error</strong><br>
                        ${message}<br><br>
                        <strong>Troubleshooting:</strong>
                        <ul style="margin-left: 20px; margin-top: 10px;">
                            <li>Check that your Google Sheet is shared publicly</li>
                            <li>Verify the Google Sheets API is enabled</li>
                            <li>Make sure your API key is valid and not restricted</li>
                            <li>Confirm the spreadsheet ID is correct</li>
                        </ul>
                    </div>
                </div>
            `;
        }

        function exportData() {
            const dataToExport = {
                vehicles: appData.vehicles,
                maintenance: appData.maintenance,
                drivers: appData.drivers,
                logs: appData.logs,
                lastUpdate: appData.lastUpdate
            };
            
            const dataStr = JSON.stringify(dataToExport, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `vehicle-management-export-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            showNotification('Data exported successfully!', 'success');
        }

        function viewRawData() {
            const newWindow = window.open('', '_blank');
            newWindow.document.write(`
                <html>
                    <head>
                        <title>Raw Data - Vehicle Management System</title>
                        <style>
                            body { font-family: monospace; padding: 20px; background: #f8f9fa; }
                            pre { background: white; padding: 20px; border-radius: 8px; overflow: auto; }
                        </style>
                    </head>
                    <body>
                        <h1>Raw Data from Google Sheets</h1>
                        <p>Last Updated: ${appData.lastUpdate || 'Never'}</p>
                        <pre>${JSON.stringify(appData, null, 2)}</pre>
                    </body>
                </html>
            `);
        }

        // Initialize tooltips and help text
        document.addEventListener('DOMContentLoaded', function() {
            // Add helpful tooltips
            const tooltips = [
                { selector: '#totalVehicles', text: 'Total number of vehicles in your fleet' },
                { selector: '#activeVehicles', text: 'Vehicles currently in active service' },
                { selector: '#maintenanceDue', text: 'Vehicles requiring maintenance within 7 days' },
                { selector: '#fleetValue', text: 'Combined current value of all vehicles' }
            ];
            
            tooltips.forEach(tooltip => {
                const element = document.querySelector(tooltip.selector);
                if (element) {
                    element.parentElement.title = tooltip.text;
                }
            });
        });

        // Error handling for failed requests
        window.addEventListener('unhandledrejection', function(event) {
            console.error('Unhandled promise rejection:', event.reason);
            showNotification('An unexpected error occurred. Check the console for details.', 'error');
        });

        // Auto-retry connection on failure
        let retryAttempts = 0;
        const maxRetries = 3;

        async function retryConnection() {
            if (retryAttempts < maxRetries && appData.connectionStatus === 'error') {
                retryAttempts++;
                updateConnectionStatus('connecting', `Retrying connection (${retryAttempts}/${maxRetries})...`);
                
                setTimeout(async () => {
                    try {
                        await testConnection();
                        await loadAllData();
                        updateDashboard();
                        updateAllTables();
                        updateConnectionStatus('connected', 'Connected to Google Sheets');
                        retryAttempts = 0; // Reset on success
                    } catch (error) {
                        if (retryAttempts >= maxRetries) {
                            updateConnectionStatus('error', `Connection failed after ${maxRetries} attempts`);
                        } else {
                            setTimeout(retryConnection, 5000); // Retry in 5 seconds
                        }
                    }
                }, 2000);
            }
        }

        // Export functions for external use
        window.VehicleManagementApp = {
            refreshData,
            testConnection,
            exportData,
            showTab,
            appData,
            CONFIG
        };
    </script>
</body>
</html>
